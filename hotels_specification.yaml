openapi: 3.0.1
info:
  title: Swagger for Hotel reservation
  version: 1.0.0
servers:
  - url: http://localhost:88/
tags:
  - name: articles
    description: Everything about your Articles
    externalDocs:
      description: Find out more
      url: http://localhost:88
  - name: categories
    description: Everything about your Categories
    externalDocs:
      description: Find out more
      url: http://localhost:88
  - name: tags
    description: Everything about your Tags
    externalDocs:
      description: Find out more
      url: http://localhost:88
  - name: hotels
    description: Everything about your Hotels
    externalDocs:
      description: Find out more
      url: http://localhost:88
  - name: bookings
    description: Everything about your Hotels
    externalDocs:
      description: Find out more
      url: http://localhost:88
  - name: users
    description: Everything about your Users
    externalDocs:
      description: Find out more
      url: http://localhost:88
paths:

  /articles:
    get:
      tags:
        - articles
      summary: get all articles
      description: Returns all articles
      operationId: getArticles
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Article not found
          content: { }
      security:
        - api_key: [ ]

  /article:
    post:
      tags:
        - articles
      summary: add an article
      operationId: addArticle
      requestBody:
        description: Article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:articles
            - read:articles
      x-codegen-request-body-name: body

  /articles/{articleId}:
    get:
      tags:
        - articles
      summary: get article by provided id
      description: Returns a single article
      operationId: getArticleById
      parameters:
        - name: articleId
          in: path
          description: ID of article to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Article not found
          content: { }
      security:
        - api_key: [ ]
    put:
      tags:
        - articles
      summary: Updates an article  with form data
      operationId: updateArticleWithForm
      parameters:
        - name: articleId
          in: path
          description: ID of article that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                title:
                  type: string
                  description: Updated title of the article
                short_description:
                  type: string
                  description: Updated description of the article
                content:
                  type: string
                  description: Updated content of the article

      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:articles
            - read:articles
    delete:
      tags:
        - articles
      summary: Deletes an article
      operationId: deleteArticle
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: articleId
          in: path
          description: Article id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Article not found
          content: { }
      security:
        - auth:
            - write:articles
            - read:articles

  /articles/author/{authorId}:
    get:
      tags:
        - articles
      summary: get all articles by specific author
      description: Returns all articles by specific author
      operationId: getArticleByAuthorId
      parameters:
        - name: authorId
          in: path
          description: ID of author to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Article not found
          content: { }
      security:
        - api_key: [ ]

  /articles/category/{categoryId}:
    get:
      tags:
        - articles
      summary: get all articles by specific category
      description: Returns all articles by specific category
      operationId: getArticleByCategoryId
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Articles not found
          content: { }
      security:
        - api_key: [ ]

  /articles/tag/{tagId}:
    get:
      tags:
        - articles
      summary: get all articles by specific tag
      description: Returns all articles by specific tag
      operationId: getArticleByTagId
      parameters:
        - name: tagId
          in: path
          description: ID of author to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Article not found
          content: { }
      security:
        - api_key: [ ]

  /categories/{categoryId}:
    get:
      tags:
        - categories
      summary: get category by provided id
      description: Returns a single category
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Category not found
          content: { }
      security:
        - api_key: [ ]
    put:
      tags:
        - categories
      summary: Updates a category  with form data
      operationId: updateCategoryWithForm
      parameters:
        - name: categoryId
          in: path
          description: ID of category that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the category

      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:categories
            - read:categories
    delete:
      tags:
        - categories
      summary: Deletes a category
      operationId: deleteCategory
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: categoryId
          in: path
          description: Category id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Category not found
          content: { }
      security:
        - auth:
            - write:categories
            - read:categories

  /categories:
    get:
      tags:
        - categories
      summary: get all categories
      description: Returns all categories
      operationId: getCategory
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Category not found
          content: { }
      security:
        - api_key: [ ]

  /category:
    post:
      tags:
        - categories
      summary: add a category
      operationId: addCategory
      requestBody:
        description: Category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:categories
            - read:categories
      x-codegen-request-body-name: body

  /tags/{tagId}:
    get:
      tags:
        - tags
      summary: get tag by provided id
      description: Returns a single tag
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          description: ID of tag to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Tag not found
          content: { }
      security:
        - api_key: [ ]
    put:
      tags:
        - tags
      summary: Updates a tag  with form data
      operationId: updateTagWithForm
      parameters:
        - name: tagId
          in: path
          description: ID of tag that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the tag

      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:tags
            - read:tags
    delete:
      tags:
        - tags
      summary: Deletes a tag
      operationId: deleteTag
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: tagId
          in: path
          description: Tag id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Tag not found
          content: { }
      security:
        - auth:
            - write:tags
            - read:tags

  /tags:
    get:
      tags:
        - tags
      summary: get all tags
      description: Returns all tags
      operationId: getTags
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Tag not found
          content: { }
      security:
        - api_key: [ ]

  /tag:
    post:
      tags:
        - tags
      summary: add a tag
      operationId: addTag
      requestBody:
        description: Tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:tags
            - read:tags
      x-codegen-request-body-name: body

  /hotels/{hotelId}:
    get:
      tags:
        - hotels
      summary: get hotel by provided id
      description: Returns a single hotel
      operationId: getHotelById
      parameters:
        - name: hotelId
          in: path
          description: ID of hotel to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Hotel not found
          content: { }
      security:
        - api_key: [ ]
    put:
      tags:
        - hotels
      summary: Updates a hotel  with form data
      operationId: updateHotelWithForm
      parameters:
        - name: hotelId
          in: path
          description: ID of hotel that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the hotel
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:hotels
            - read:hotels
    delete:
      tags:
        - hotels
      summary: Delete a hotel
      operationId: deleteHotel
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: hotelId
          in: path
          description: Hotel id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Hotel not found
          content: { }
      security:
        - auth:
            - write:hotels
            - read:hotels

  /hotels:
    get:
      tags:
        - hotels
      summary: get all hotels
      description: Returns all hotels
      operationId: getHotels
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Hotel not found
          content: { }
      security:
        - api_key: [ ]

  /hotels/country/{countryId}:
    get:
      tags:
        - hotels
      summary: get hotel by provided country id
      description: Returns all hotel by provided country id
      operationId: getHotelByCountryId
      parameters:
        - name: countryId
          in: path
          description: ID of country to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Hotel not found
          content: { }
      security:
        - api_key: [ ]

  /hotels/rating/{ratingId}:
    get:
      tags:
        - hotels
      summary: get hotel by provided  rating id
      description: Returns all hotel by provided  rating id
      operationId: getHotelByRatingId
      parameters:
        - name: ratingId
          in: path
          description: ID of rating to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Hotel not found
          content: { }
      security:
        - api_key: [ ]

  /hotel:
    post:
      tags:
        - hotels
      summary: add a hotel
      operationId: addHotel
      requestBody:
        description: Hotel
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
          application/xml:
            schema:
              $ref: '#/components/schemas/Hotel'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:hotels
            - read:hotels
      x-codegen-request-body-name: body

  /bookings/{bookingId}:
    get:
      tags:
        - bookings
      summary: get reservation by provided id
      description: Returns a reservation by provided id
      operationId: getBookingById
      parameters:
        - name: bookingId
          in: path
          description: ID of reservation to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Booking'
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Reservation not found
          content: { }
      security:
        - api_key: [ ]
    put:
      tags:
        - bookings
      summary: Updates a reservation  with form data
      operationId: updateReservationWithForm
      parameters:
        - name: bookingId
          in: path
          description: ID of reservation that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                status:
                  type: string
                  description: Updated status of the reservation
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:bookings
            - read:bookings
    delete:
      tags:
        - bookings
      summary: Deletes a reservation
      operationId: deleteBooking
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: bookingId
          in: path
          description: Booking id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Reservation not found
          content: { }
      security:
        - auth:
            - write:bookings
            - read:bookings

  /bookings:
    get:
      tags:
        - bookings
      summary: get all reservations
      description: Returns all reservations
      operationId: getBookings
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Booking'
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Reservation not found
          content: { }
      security:
        - api_key: [ ]
  /booking:
    post:
      tags:
        - bookings
      summary: add a reservation
      operationId: addBooking
      requestBody:
        description: Booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
          application/xml:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:bookings
            - read:bookings
      x-codegen-request-body-name: body

  /bookings/status/{statusId}:
    get:
      tags:
        - bookings
      summary: get reservation by provided  status id
      description: Returns all reservations by provided status id
      operationId: getBookingByRatingId
      parameters:
        - name: statusId
          in: path
          description: ID of status to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Booking'
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Reservation not found
          content: { }
      security:
        - api_key: [ ]

  /users/{userId}:
    get:
      tags:
        - users
      summary: get user by provided id
      description: Returns a user by provided id
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - api_key: [ ]
    put:
      tags:
        - users
      summary: Updates an user  with form data
      operationId: updateUserWithForm
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  description: Updated username of the user
                firstName:
                    type: string
                    description: Updated firstName of the user
                lastName:
                      type: string
                      description: Updated lastName of the user
                email:
                        type: string
                        description: Updated email of the user
                phone:
                        type: string
                        description: Updated phone of the user
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:user
            - read:user
    delete:
      tags:
        - users
      summary: Deletes an user
      operationId: deleteUser
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - auth:
            - write:users
            - read:users

  /users:
    get:
      tags:
        - users
      summary: get all users
      description: Returns all users
      operationId: getUsers
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - api_key: [ ]
  /user:
    post:
      tags:
        - users
      summary: add an user
      operationId: addUser
      requestBody:
        description: User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - auth:
            - write:users
            - read:users
      x-codegen-request-body-name: body


components:
  responses:
    NoContentOnDelete:
      description: 204 description
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Message explaning reason of error
                example: 400 Bad Request - The request could not be understood by the server due to
                  malformed syntax. The client should not repeat the request without modifications.

  schemas:
    Article:
      type: object
      properties:
        articleId:
          type: integer
          format: int64
        title:
          type: string
        short_description:
          type: string
        content:
          type: string
        create_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        authorId:
          $ref: '#/components/schemas/User'
        categoryId:
          $ref: '#/components/schemas/Category'
        imageId:
          $ref: '#/components/schemas/Image'
      xml:
        name: Article

    Category:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
        name:
          type: string
        create_at:
          type: string
          format: date-time
        updated_up:
          type: string
          format: date-time
      xml:
        name: Category
    Image:
      type: object
      properties:
        imageId:
          type: integer
          format: int64
        name:
          type: string
        create_at:
          type: string
          format: date-time
        updated_up:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        path:
          type: string
      xml:
        name: Image

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User

    Tag:
      type: object
      properties:
        tagId:
          type: integer
          format: int64
        name:
          type: string
        create_at:
          type: string
          format: date-time
        updated_up:
          type: string
          format: date-time
      xml:
        name: Tag

    Booking:
      type: object
      properties:
        bookingId:
          type: integer
          format: int64
        check_in:
          type: string
          format: date-time
        check_out:
          type: string
          format: date-time
        roomId:
          $ref: '#/components/schemas/Room'
        status:
          type: string
          description: reservation status
          enum:
            - inactive
            - active
        userId:
          $ref: '#/components/schemas/User'
      xml:
        name: Booking

    Room:
      type: object
      properties:
        roomId:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        floor:
          type: integer
          format: int64
        type:
          type: string
          description: room type
          enum:
            - lux
            - standart
      xml:
        name: Room

    Hotel:
      type: object
      properties:
        hotelId:
          type: integer
          format: int64
        name:
          type: string
        ratingId:
          $ref: '#/components/schemas/Rating'
        countryId:
          $ref: '#/components/schemas/Country'
      xml:
        name: Hotel

    Country:
      type: object
      properties:
        countryId:
          type: integer
          format: int64
        name:
          type: string
        state:
          type: string
      xml:
        name: Country
    Rating:
      type: object
      properties:
        ratingId:
          type: integer
          format: int64
        stars:
          type: integer
          format: int64
      xml:
        name: Rating

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string

  securitySchemes:
    auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:88/oauth/dialog
          scopes:
            write:articles: modify article in your account
            read:articles: read your article
            write:categories: modify category in your account
            read:categories: read your categories
            write:user: modify profile
            read:user: read your profile
            write:tags: modify tag in your account
            read:tags: read  tag
            write:bookings: modify bookings in your account
            read:bookings: read your bookings
            write:hotels: modify hotels info
            read:hotels: read hotel info

    api_key:
      type: apiKey
      name: api_key
      in: header
